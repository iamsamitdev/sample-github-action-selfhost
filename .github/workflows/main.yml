# =================================================================
# GitHub Actions CI/CD Pipeline for Express.js Application
# =================================================================
# ‡∏ä‡∏∑‡πà‡∏≠ workflow
name: CI/CD Pipeline - Express App

# =================================================================
# TRIGGERS: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ workflow ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
# =================================================================

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Trigger: ‡πÉ‡∏´‡πâ Workflow ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch 'main'
on:
  push:
    branches:
      - main
    # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ build ‡∏ï‡∏≠‡∏ô‡πÅ‡∏ó‡πá‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ
    # tags: [ 'v*.*.*' ]

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Trigger: ‡πÉ‡∏´‡πâ Workflow ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Pull Request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch 'main'
  pull_request:
    branches:
      - main

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Trigger: ‡πÅ‡∏ö‡∏ö Manual (Workflow Dispatch) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ GitHub
  workflow_dispatch:

# =================================================================
# ENVIRONMENT VARIABLES: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á Workflow
# =================================================================
env:
  NODE_VERSION: '22'
  DOCKER_IMAGE: 'iamsamitdev/express-app-action'  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Docker Hub username ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  CONTAINER_NAME: 'express-app-prod' # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ container ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á Windows ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

# =================================================================
# JOBS: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Jobs ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÉ‡∏ô Workflow
# =================================================================
jobs:
  # Job 1: Build ‡πÅ‡∏•‡∏∞ Test (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô GitHub)
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout code ‡∏à‡∏≤‡∏Å repository
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      # Step 2: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Node.js environment
      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Step 3: ‡πÅ‡∏™‡∏î‡∏á Node.js ‡πÅ‡∏•‡∏∞ npm version
      - name: üìã Display Node.js and npm versions
        run: |
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
      
      # Step 4: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
      - name: üì¶ Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
      
      # Step 5: ‡∏£‡∏±‡∏ô tests ‡∏û‡∏£‡πâ‡∏≠‡∏° coverage
      - name: üß™ Run tests with coverage
        run: npm test
      
      # Step 6: Upload coverage report (optional)
      - name: üìä Upload coverage report
        if: always() && hashFiles('coverage/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7 # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏ß‡πâ 7 ‡∏ß‡∏±‡∏ô

  # Job 2: Build ‡πÅ‡∏•‡∏∞ Push Docker Image (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô GitHub)
  build-docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    # ‡∏£‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á main branch ‡∏´‡∏£‡∏∑‡∏≠ manual dispatch
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      # Step 1: Checkout code
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      # Step 2: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Docker Buildx
      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Step 3: Login to Docker Hub
      # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DOCKERHUB_USERNAME ‡πÅ‡∏•‡∏∞ DOCKERHUB_TOKEN ‡πÉ‡∏ô GitHub Secrets
      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker image metadata (tags ‡πÅ‡∏•‡∏∞ labels)
      - name: üè∑Ô∏è Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      # Step 5: Build ‡πÅ‡∏•‡∏∞ Push Docker image
      - name: üê≥ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Step 6: ‡πÅ‡∏™‡∏î‡∏á image digest
      - name: üìù Image digest
        run: |
          echo "Image pushed successfully!"
          echo "Tags: ${{ steps.meta.outputs.tags }}"

  # Job 3: Security Scan (Optional - ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Trivy) (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô GitHub)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° permissions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö security-events
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      # Step 1: Checkout code
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      # Step 2: ‡∏£‡∏±‡∏ô Trivy vulnerability scanner
      - name: üîí Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      # Step 3: Upload Trivy results to GitHub Security
      - name: üì§ Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # =================================================================
  # Job 4: Deploy (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á Windows ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
  # =================================================================
  deploy-to-windows:
    name: Deploy to Local Windows Docker
    
    # 1. ‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ö‡∏ô runner ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    runs-on: self-hosted-windows-docker 
    
    needs: [build-docker, security-scan]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    # 2. ‡πÉ‡∏ä‡πâ environment 'production' (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô practice ‡∏ó‡∏µ‡πà‡∏î‡∏µ)
    environment:
      name: production
      url: http://localhost:3000 # URL ‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    
    steps:
      # 3. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á PowerShell ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á Windows ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      - name: üöÄ Deploy to Docker Desktop
        # ‡πÉ‡∏ä‡πâ 'shell: pwsh' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô default ‡∏ö‡∏ô Windows runner)
        shell: pwsh 
        run: |
          echo "Starting deployment on Windows Self-Hosted Runner..."
          
          # 4. ‡∏î‡∏∂‡∏á image ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á build ‡πÄ‡∏™‡∏£‡πá‡∏à
          echo "Pulling latest image: ${{ env.DOCKER_IMAGE }}:latest"
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # 5. ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏ö container ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          # ‡πÉ‡∏ä‡πâ -ErrorAction SilentlyContinue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ script ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ container ‡πÄ‡∏Å‡πà‡∏≤
          echo "Stopping and removing old container: ${{ env.CONTAINER_NAME }}"
          docker stop ${{ env.CONTAINER_NAME }} -ErrorAction SilentlyContinue
          docker rm ${{ env.CONTAINER_NAME }} -ErrorAction SilentlyContinue
          
          # 6. ‡∏£‡∏±‡∏ô container ‡πÉ‡∏´‡∏°‡πà
          echo "Running new container on port 3000..."
          docker run -d --name ${{ env.CONTAINER_NAME }} -p 3000:3000 --restart always ${{ env.DOCKER_IMAGE }}:latest
          
          echo "Deployment complete! Access at http://localhost:3000"